name: One hot encode
inputs:
- name: input_df
  type: pd.DataFrame
outputs:
- name: Output
  type: pd.DataFrame
implementation:
  container:
    image: tensorflow/tensorflow:1.13.2-py3
    command:
    - sh
    - -c
    - (PIP_DISABLE_PIP_VERSION_CHECK=1 python3 -m pip install --quiet --no-warn-script-location
      'numpy==1.17.2' 'pandas==0.25.1' || PIP_DISABLE_PIP_VERSION_CHECK=1 python3
      -m pip install --quiet --no-warn-script-location 'numpy==1.17.2' 'pandas==0.25.1'
      --user) && "$0" "$@"
    - python3
    - -u
    - -c
    - "def one_hot_encode(input_df )  : \n\n    ## Import Required Libraries\n   \
      \ import pandas as pd\n    import numpy as np\n\n    df_churn = input_df #pd.read_csv(file_name)\
      \  \n\n    binary_cols = ['Partner','Dependents','PhoneService','PaperlessBilling']\n\
      \n    for i in binary_cols:\n        df_churn[i] = df_churn[i].replace({\"Yes\"\
      :1,\"No\":0})\n\n    #Encoding column 'gender'\n    df_churn['gender'] = df_churn['gender'].replace({\"\
      Male\":1,\"Female\":0})\n\n    category_cols = ['PaymentMethod','MultipleLines','InternetService','OnlineSecurity',\n\
      \                   'OnlineBackup','DeviceProtection',\n                   'TechSupport','StreamingTV','StreamingMovies','Contract']\n\
      \n    for cc in category_cols:\n        dummies = pd.get_dummies(df_churn[cc],\
      \ drop_first=False)\n        dummies = dummies.add_prefix(\"{}#\".format(cc))\n\
      \        df_churn.drop(cc, axis=1, inplace=True)\n        df_churn = df_churn.join(dummies)\n\
      \n    df_churn['Churn'] = df_churn['Churn'].replace({\"Yes\":1,\"No\":0})\n\n\
      \    #saving files may need a PV allocation to container\n    #output of files\
      \ as Named tuple may cause problems    \n\n    return df_churn \n\nimport argparse\n\
      _parser = argparse.ArgumentParser(prog='One hot encode', description='')\n_parser.add_argument(\"\
      --input-df\", dest=\"input_df\", type=str, required=True, default=argparse.SUPPRESS)\n\
      _parser.add_argument(\"----output-paths\", dest=\"_output_paths\", type=str,\
      \ nargs=1)\n_parsed_args = vars(_parser.parse_args())\n_output_files = _parsed_args.pop(\"\
      _output_paths\", [])\n\n_outputs = one_hot_encode(**_parsed_args)\n\nif not\
      \ hasattr(_outputs, '__getitem__') or isinstance(_outputs, str):\n    _outputs\
      \ = [_outputs]\n\n_output_serializers = [\n    str,\n\n]\n\nimport os\nfor idx,\
      \ output_file in enumerate(_output_files):\n    try:\n        os.makedirs(os.path.dirname(output_file))\n\
      \    except OSError:\n        pass\n    with open(output_file, 'w') as f:\n\
      \        f.write(_output_serializers[idx](_outputs[idx]))\n"
    args:
    - --input-df
    - inputValue: input_df
    - '----output-paths'
    - outputPath: Output
