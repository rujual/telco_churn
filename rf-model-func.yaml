name: Rf model
inputs:
- name: input_df
  type: pd.DataFrame
- name: n_estimators
  type: Integer
  default: '100'
  optional: true
outputs:
- name: Cf1
  type: Integer
- name: Cf2
  type: Integer
- name: Cf3
  type: Integer
- name: Cf4
  type: Integer
implementation:
  container:
    image: tensorflow/tensorflow:1.13.2-py3
    command:
    - sh
    - -c
    - (PIP_DISABLE_PIP_VERSION_CHECK=1 python3 -m pip install --quiet --no-warn-script-location
      'scikit-learn==0.19.1' 'numpy' 'pandas' 'imbalanced-learn==0.6.2' || PIP_DISABLE_PIP_VERSION_CHECK=1
      python3 -m pip install --quiet --no-warn-script-location 'scikit-learn==0.19.1'
      'numpy' 'pandas' 'imbalanced-learn==0.6.2' --user) && "$0" "$@"
    - python3
    - -u
    - -c
    - "def rf_model(input_df , n_estimators  = 100):      \n                     \
      \                                                                   \n\n   \
      \ from sklearn.ensemble import RandomForestClassifier\n    from imblearn.over_sampling\
      \ import SMOTE\n    from sklearn.model_selection import GridSearchCV\n    from\
      \ sklearn.model_selection import train_test_split\n    from sklearn.metrics\
      \ import confusion_matrix\n\n    df_churn = input_df\n    n_est = n_estimators\n\
      \n    y1 = df_churn['Churn']\n    X1 = df_churn.drop(['Churn'],axis=1)\n\n \
      \   X_train, X_test, y_train, y_test = train_test_split(X1, y1, random_state=0)\n\
      \n    sm = SMOTE(random_state=0)\n    X_train_res, y_train_res = sm.fit_sample(X_train,\
      \ y_train)\n\n    param_grid = {\n        'n_estimators': [50, 100, 200],\n\
      \        'max_features': ['auto', 'sqrt', 'log2'],\n        'max_depth' : [2,4,5,6,7,8],\n\
      \        'criterion' :['gini', 'entropy']\n    }\n\n    rfc=RandomForestClassifier(random_state=42,n_estimators=n_est)\n\
      \    gsv_rfc = GridSearchCV(estimator=rfc, param_grid=param_grid, cv= 5)\n \
      \   rfc.fit(X_train_res, y_train_res)\n\n    rfc_best=RandomForestClassifier(random_state=42,\
      \ max_features='auto', n_estimators= 50, max_depth=8,\n                    \
      \                criterion='gini')\n\n    rfc_best.fit(X_train_res, y_train_res)\n\
      \    X_test_res, y_test_res = sm.fit_sample(X_test, y_test)\n    y_test_pred\
      \ = rfc_best.predict(X_test_res)\n    rf_score = rfc_best.score(X_test_res,\
      \ y_test_res)\n    conf = confusion_matrix(y_test_res, y_test_pred)\n    return\
      \ (conf[0][0],conf[0][1],conf[1][0],conf[1][1])\n\ndef _serialize_int(int_value:\
      \ int) -> str:\n    if isinstance(int_value, str):\n        return int_value\n\
      \    if not isinstance(int_value, int):\n        raise TypeError('Value \"{}\"\
      \ has type \"{}\" instead of int.'.format(str(int_value), str(type(int_value))))\n\
      \    return str(int_value)\n\nimport argparse\n_parser = argparse.ArgumentParser(prog='Rf\
      \ model', description='')\n_parser.add_argument(\"--input-df\", dest=\"input_df\"\
      , type=str, required=True, default=argparse.SUPPRESS)\n_parser.add_argument(\"\
      --n-estimators\", dest=\"n_estimators\", type=int, required=False, default=argparse.SUPPRESS)\n\
      _parser.add_argument(\"----output-paths\", dest=\"_output_paths\", type=str,\
      \ nargs=4)\n_parsed_args = vars(_parser.parse_args())\n_output_files = _parsed_args.pop(\"\
      _output_paths\", [])\n\n_outputs = rf_model(**_parsed_args)\n\nif not hasattr(_outputs,\
      \ '__getitem__') or isinstance(_outputs, str):\n    _outputs = [_outputs]\n\n\
      _output_serializers = [\n    _serialize_int,\n    _serialize_int,\n    _serialize_int,\n\
      \    _serialize_int,\n\n]\n\nimport os\nfor idx, output_file in enumerate(_output_files):\n\
      \    try:\n        os.makedirs(os.path.dirname(output_file))\n    except OSError:\n\
      \        pass\n    with open(output_file, 'w') as f:\n        f.write(_output_serializers[idx](_outputs[idx]))\n"
    args:
    - --input-df
    - inputValue: input_df
    - if:
        cond:
          isPresent: n_estimators
        then:
        - --n-estimators
        - inputValue: n_estimators
    - '----output-paths'
    - outputPath: Cf1
    - outputPath: Cf2
    - outputPath: Cf3
    - outputPath: Cf4
