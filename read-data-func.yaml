name: Read data
inputs:
- name: file_name
  type: String
outputs:
- name: Output
  type: pd.DataFrame
implementation:
  container:
    image: tensorflow/tensorflow:1.13.2-py3
    command:
    - sh
    - -c
    - (PIP_DISABLE_PIP_VERSION_CHECK=1 python3 -m pip install --quiet --no-warn-script-location
      'numpy==1.17.2' 'pandas==0.25.1' || PIP_DISABLE_PIP_VERSION_CHECK=1 python3
      -m pip install --quiet --no-warn-script-location 'numpy==1.17.2' 'pandas==0.25.1'
      --user) && "$0" "$@"
    - python3
    - -u
    - -c
    - "def read_data(file_name )  : \n\n    ## Import Required Libraries\n    import\
      \ pandas as pd\n    import numpy as np\n\n    #This line may cause problems\
      \ as file is on the system and not inside container\n    #Importing directly\
      \ from Github Raw Content\n\n    df_churn = pd.read_csv(file_name)\n    col1\
      \ = len(df_churn.columns)\n\n    empty_cols=['customerID', 'gender', 'SeniorCitizen',\
      \ 'Partner', 'Dependents',\n           'tenure', 'PhoneService', 'MultipleLines',\
      \ 'InternetService',\n           'OnlineSecurity', 'OnlineBackup', 'DeviceProtection','TechSupport',\n\
      \           'StreamingTV', 'StreamingMovies', 'Contract', 'PaperlessBilling',\n\
      \           'PaymentMethod', 'MonthlyCharges', 'TotalCharges', 'Churn']\n\n\
      \    for i in empty_cols:\n        df_churn[i]=df_churn[i].replace(\" \",np.nan)\n\
      \n    df_churn.drop(['customerID','cluster number'], axis=1, inplace=True)\n\
      \    df_churn = df_churn.dropna()\n    #df_churn.to_string()\n    return df_churn\n\
      \nimport argparse\n_parser = argparse.ArgumentParser(prog='Read data', description='')\n\
      _parser.add_argument(\"--file-name\", dest=\"file_name\", type=str, required=True,\
      \ default=argparse.SUPPRESS)\n_parser.add_argument(\"----output-paths\", dest=\"\
      _output_paths\", type=str, nargs=1)\n_parsed_args = vars(_parser.parse_args())\n\
      _output_files = _parsed_args.pop(\"_output_paths\", [])\n\n_outputs = read_data(**_parsed_args)\n\
      \nif not hasattr(_outputs, '__getitem__') or isinstance(_outputs, str):\n  \
      \  _outputs = [_outputs]\n\n_output_serializers = [\n    str,\n\n]\n\nimport\
      \ os\nfor idx, output_file in enumerate(_output_files):\n    try:\n        os.makedirs(os.path.dirname(output_file))\n\
      \    except OSError:\n        pass\n    with open(output_file, 'w') as f:\n\
      \        f.write(_output_serializers[idx](_outputs[idx]))\n"
    args:
    - --file-name
    - inputValue: file_name
    - '----output-paths'
    - outputPath: Output
